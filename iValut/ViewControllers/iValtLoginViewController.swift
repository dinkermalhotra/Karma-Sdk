import UIKit
import Foundation
import LocalAuthentication
import FaceTecSDK

protocol iValtLoginViewControllerDelegate: class
{
    func onSuccess(_ message: String, _ userDetails: [[String: AnyObject]])
    func didFailWithError(_ message: String)
}

class iValtLoginViewController: UIViewController, URLSessionDelegate {

    weak var delegate: iValtLoginViewControllerDelegate?
    var deviceToken = ""
    
    var latestSessionResult: FaceTecSessionResult!
    var latestIDScanResult: FaceTecIDScanResult!
    var latestProcessor: Processor!
    var requestInProgress: Bool = false
    var error = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
            if(initializationSuccessful) {
                self.getSessionToken() { sessionToken in
                    self.latestProcessor = LoginAuthenticateProcessor(sessionToken: sessionToken, fromViewController: self)
                }
            }
        })
    }
    
    func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
        let endpoint = Config.BaseURL + "/session-token"
        let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
        request.httpMethod = "GET"
        // Required parameters to interact with the FaceTec Managed Testing API.
        request.addValue(Config.DeviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
        
        let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
        let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            // Ensure the data object is not nil otherwise callback with empty dictionary.
            guard let data = data else {
                print("Exception raised while attempting HTTPS call.")
                return
            }
            if let responseJSONObj = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as? [String: AnyObject] {
                if((responseJSONObj["sessionToken"] as? String) != nil)
                {
                    sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
                    return
                }
                else {
                    print("Exception raised while attempting HTTPS call.")
                }
            }
        })
        task.resume()
    }
}

// MARK: - FACETECH CALLBACK
extension iValtLoginViewController {
    func onComplete() {
        if self.latestProcessor.isSuccess() {
            do {
                let deviceId = try KeychainWrapper.init().getDeviceId()
                self.loginUser(deviceId)
            }
            catch let error {
                self.delegate?.didFailWithError(error.localizedDescription)
            }
        }
        else {
            self.delegate?.didFailWithError("User cancelled")
        }
    }
    
    func onFaceScanResultCancel() {
        self.delegate?.didFailWithError(self.error)
    }
    
    func setLatestSessionResult(sessionResult: FaceTecSessionResult) {
        latestSessionResult = sessionResult
    }
    
    func setLatestIDScanResult(idScanResult: FaceTecIDScanResult) {
        latestIDScanResult = idScanResult
    }
    
    func setLatestServerResult(responseJSON: [String: AnyObject]) {
        print(responseJSON)
        if let error = responseJSON["error"] as? String {
            self.error = error
            print(error)
        }
    }
}

// MARK: - API CALL
extension iValtLoginViewController {
    func loginUser(_ deviceId: String) {
        let params: [String: AnyObject] = [WSRequestParams.WS_REQS_PARAM_IMEI: deviceId as AnyObject]
        WSManager.wsCallRegisterUserDetails(params) { (isSuccess, message, userDetails) in
            if isSuccess {
                if userDetails.count > 0, let mobile = userDetails[0][WSRequestParams.WS_REQS_PARAM_MOBILE] as? String {
                    self.updateToken(mobile, deviceId)
                }
                
                self.delegate?.onSuccess(message, userDetails)
            }
            else {
                if let vc = ViewControllerHelper.getViewController(ofType: .iValtRegistrationViewController) as? iValtRegistrationViewController {
                    self.navigationController?.pushViewController(vc, animated: true)
                }
            }
        }
    }
    
    func updateToken(_ mobile: String, _ deviceId: String) {
        let params: [String: AnyObject] = [WSRequestParams.WS_REQS_PARAM_MOBILE: mobile as AnyObject,
                                           WSRequestParams.WS_REQS_PARAM_TOKEN: deviceToken as AnyObject,
                                           WSRequestParams.WS_REQS_PARAM_IMEI: deviceId as AnyObject]
        WSManager.wsCallUpdateToken(params)
    }
}
