import UIKit
import FaceTecSDK

class iValtZoomViewController: UIViewController, URLSessionDelegate {

    var latestSessionResult: FaceTecSessionResult!
    var latestIDScanResult: FaceTecIDScanResult!
    var latestProcessor: Processor!
    var requestInProgress: Bool = false
    var error = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()

        checkEnrollmentStatus()
        
        Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
            if(initializationSuccessful) {
                
            }
        })
    }

    func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
        let endpoint = Config.BaseURL + "/session-token"
        let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
        request.httpMethod = "GET"
        // Required parameters to interact with the FaceTec Managed Testing API.
        request.addValue(Config.DeviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
        
        let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
        let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            // Ensure the data object is not nil otherwise callback with empty dictionary.
            guard let data = data else {
                print("Exception raised while attempting HTTPS call.")
                return
            }
            if let responseJSONObj = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as? [String: AnyObject] {
                if((responseJSONObj["sessionToken"] as? String) != nil)
                {
                    sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
                    return
                }
                else {
                    print("Exception raised while attempting HTTPS call.")
                }
            }
        })
        task.resume()
    }
}

// MARK: - FACETECH CALLBACK
extension iValtZoomViewController {
    func onComplete() {
        if self.latestProcessor.isSuccess() {
            self.setEnrollmentStatus()
        }
        else {
            var data: [AnyHashable: Any] = [:]
            data[WSResponseParams.WS_RESP_PARAM_MESSAGE] = "User cancelled"
            NotificationCenter.default.post(name: NSNotification.Name(NOTIFICATION_FAILURE), object: nil, userInfo: data)
        }
    }
    
    func onFaceScanResultCancel() {
        var data: [AnyHashable: Any] = [:]
        data[WSResponseParams.WS_RESP_PARAM_MESSAGE] = self.error
        NotificationCenter.default.post(name: NSNotification.Name(NOTIFICATION_FAILURE), object: nil, userInfo: data)
    }
    
    func setLatestSessionResult(sessionResult: FaceTecSessionResult) {
        latestSessionResult = sessionResult
    }
    
    func setLatestIDScanResult(idScanResult: FaceTecIDScanResult) {
        latestIDScanResult = idScanResult
    }
    
    func setLatestServerResult(responseJSON: [String: AnyObject]) {
        print(responseJSON)
        if let error = responseJSON["error"] as? String {
            self.error = error
        }
    }
}

// MARK: - API CALL
extension iValtZoomViewController {
    func checkEnrollmentStatus() {
        let params: [String: AnyObject] = [WSRequestParams.WS_REQS_PARAM_MOBILE: Helper.getPREF(UserDefaultsConstants.PREF_MOBILE) as AnyObject]
        WSManager.wsCallCheckEnrollment(params) { (isSuccess) in
            
            if !isSuccess {
                self.getSessionToken() { sessionToken in
                    self.latestProcessor = EnrollmentProcessor(sessionToken: sessionToken, fromViewController: self)
                }
            }
            else {
                self.getSessionToken() { sessionToken in
                    self.latestProcessor = AuthenticateProcessor(sessionToken: sessionToken, fromViewController: self)
                }
            }
        }
    }
    
    func setEnrollmentStatus() {
        let params: [String: AnyObject] = [WSRequestParams.WS_REQS_PARAM_MOBILE: Helper.getPREF(UserDefaultsConstants.PREF_MOBILE) as AnyObject]
        WSManager.wsCallSetEnrollment(params) { (isSuccess) in
            if isSuccess {
                if let vc = ViewControllerHelper.getViewController(ofType: .iValtRegistrationCompletedViewController) as? iValtRegistrationCompletedViewController {
                    self.navigationController?.pushViewController(vc, animated: true)
                }
            }
        }
    }
}
